/*
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mdsd.arduinoDSL.Attribute
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mdsd.arduinoDSL.ArduinoDSLPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mdsd.arduinoDSL.Node

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ArduinoDSLScopeProvider extends AbstractArduinoDSLScopeProvider {


	override getScope(EObject context, EReference reference) {
	    // We want to define the Scope for the Element's superElement cross-reference
	    if (context instanceof Attribute && reference == Literals.ATTRIBUTE__COMPONENT) {
	        // Collect a list of candidates by going through the model
	        // EcoreUtil2 provides useful functionality to do that
	        // For example searching for all elements within the root Object's tree
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Attribute)
	        
	        val nodeName = candidates.get(1).name.name
	        val allNodes = EcoreUtil2.getAllContentsOfType(rootElement, Node)
	        
	        
	        val test = allNodes.filter[it.name == nodeName]
	        println(test)
	        
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates)
	    }
	    return super.getScope(context, reference);
	}

}
