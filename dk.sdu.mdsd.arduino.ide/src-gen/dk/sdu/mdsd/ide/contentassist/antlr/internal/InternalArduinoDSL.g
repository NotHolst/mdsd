/*
 * generated by Xtext 2.17.0
 */
grammar InternalArduinoDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.sdu.mdsd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.sdu.mdsd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.sdu.mdsd.services.ArduinoDSLGrammarAccess;

}
@parser::members {
	private ArduinoDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(ArduinoDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getProgramAssignment()); }
		(rule__Program__ProgramAssignment)*
		{ after(grammarAccess.getProgramAccess().getProgramAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getGroup()); }
		(rule__Exp__Group__0)
		{ after(grammarAccess.getExpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getGroup()); }
		(rule__Factor__Group__0)
		{ after(grammarAccess.getFactorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpWeakOp
entryRuleExpWeakOp
:
{ before(grammarAccess.getExpWeakOpRule()); }
	 ruleExpWeakOp
{ after(grammarAccess.getExpWeakOpRule()); } 
	 EOF 
;

// Rule ExpWeakOp
ruleExpWeakOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpWeakOpAccess().getAlternatives()); }
		(rule__ExpWeakOp__Alternatives)
		{ after(grammarAccess.getExpWeakOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpStrongOp
entryRuleExpStrongOp
:
{ before(grammarAccess.getExpStrongOpRule()); }
	 ruleExpStrongOp
{ after(grammarAccess.getExpStrongOpRule()); } 
	 EOF 
;

// Rule ExpStrongOp
ruleExpStrongOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpStrongOpAccess().getAlternatives()); }
		(rule__ExpStrongOp__Alternatives)
		{ after(grammarAccess.getExpStrongOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDelta
entryRuleDelta
:
{ before(grammarAccess.getDeltaRule()); }
	 ruleDelta
{ after(grammarAccess.getDeltaRule()); } 
	 EOF 
;

// Rule Delta
ruleDelta 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeltaAccess().getGroup()); }
		(rule__Delta__Group__0)
		{ after(grammarAccess.getDeltaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
		(rule__NumberLiteral__Alternatives)
		{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNUMBER
entryRuleNUMBER
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNUMBERAccess().getGroup()); }
		(rule__NUMBER__Group__0)
		{ after(grammarAccess.getNUMBERAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getValueAssignment()); }
		(rule__State__ValueAssignment)
		{ after(grammarAccess.getStateAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRuleBody
entryRuleRuleBody
:
{ before(grammarAccess.getRuleBodyRule()); }
	 ruleRuleBody
{ after(grammarAccess.getRuleBodyRule()); } 
	 EOF 
;

// Rule RuleBody
ruleRuleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getRuleBodyAccess().getAssignmentAssignment()); }
			(rule__RuleBody__AssignmentAssignment)
			{ after(grammarAccess.getRuleBodyAccess().getAssignmentAssignment()); }
		)
		(
			{ before(grammarAccess.getRuleBodyAccess().getAssignmentAssignment()); }
			(rule__RuleBody__AssignmentAssignment)*
			{ after(grammarAccess.getRuleBodyAccess().getAssignmentAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getGroup()); }
		(rule__Node__Group__0)
		{ after(grammarAccess.getNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponent
entryRuleComponent
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentAccess().getGroup()); }
		(rule__Component__Group__0)
		{ after(grammarAccess.getComponentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponentBody
entryRuleComponentBody
:
{ before(grammarAccess.getComponentBodyRule()); }
	 ruleComponentBody
{ after(grammarAccess.getComponentBodyRule()); } 
	 EOF 
;

// Rule ComponentBody
ruleComponentBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentBodyAccess().getGroup()); }
		(rule__ComponentBody__Group__0)
		{ after(grammarAccess.getComponentBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMap
entryRuleMap
:
{ before(grammarAccess.getMapRule()); }
	 ruleMap
{ after(grammarAccess.getMapRule()); } 
	 EOF 
;

// Rule Map
ruleMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapAccess().getGroup()); }
		(rule__Map__Group__0)
		{ after(grammarAccess.getMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRange
entryRuleRange
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeAccess().getGroup()); }
		(rule__Range__Group__0)
		{ after(grammarAccess.getRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRate
entryRuleRate
:
{ before(grammarAccess.getRateRule()); }
	 ruleRate
{ after(grammarAccess.getRateRule()); } 
	 EOF 
;

// Rule Rate
ruleRate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRateAccess().getGroup()); }
		(rule__Rate__Group__0)
		{ after(grammarAccess.getRateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSmoothing
entryRuleSmoothing
:
{ before(grammarAccess.getSmoothingRule()); }
	 ruleSmoothing
{ after(grammarAccess.getSmoothingRule()); } 
	 EOF 
;

// Rule Smoothing
ruleSmoothing 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSmoothingAccess().getGroup()); }
		(rule__Smoothing__Group__0)
		{ after(grammarAccess.getSmoothingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ProgramAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProgramRuleParserRuleCall_0_0()); }
		ruleRule
		{ after(grammarAccess.getProgramAccess().getProgramRuleParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getProgramNodeParserRuleCall_0_1()); }
		ruleNode
		{ after(grammarAccess.getProgramAccess().getProgramNodeParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__TypeAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getTypeWhenKeyword_0_0_0()); }
		'when'
		{ after(grammarAccess.getRuleAccess().getTypeWhenKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRuleAccess().getTypeOnceKeyword_0_0_1()); }
		'once'
		{ after(grammarAccess.getRuleAccess().getTypeOnceKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpWeakOpAccess().getGroup_0()); }
		(rule__ExpWeakOp__Group_0__0)
		{ after(grammarAccess.getExpWeakOpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpWeakOpAccess().getGroup_1()); }
		(rule__ExpWeakOp__Group_1__0)
		{ after(grammarAccess.getExpWeakOpAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpStrongOpAccess().getGroup_0()); }
		(rule__ExpStrongOp__Group_0__0)
		{ after(grammarAccess.getExpStrongOpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpStrongOpAccess().getGroup_1()); }
		(rule__ExpStrongOp__Group_1__0)
		{ after(grammarAccess.getExpStrongOpAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNumberLiteralParserRuleCall_0()); }
		ruleNumberLiteral
		{ after(grammarAccess.getValueAccess().getNumberLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getAttributeParserRuleCall_1()); }
		ruleAttribute
		{ after(grammarAccess.getValueAccess().getAttributeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getDeltaParserRuleCall_2()); }
		ruleDelta
		{ after(grammarAccess.getValueAccess().getDeltaParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getStateParserRuleCall_3()); }
		ruleState
		{ after(grammarAccess.getValueAccess().getStateParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getFloatAssignment_0()); }
		(rule__NumberLiteral__FloatAssignment_0)
		{ after(grammarAccess.getNumberLiteralAccess().getFloatAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberLiteralAccess().getIntAssignment_1()); }
		(rule__NumberLiteral__IntAssignment_1)
		{ after(grammarAccess.getNumberLiteralAccess().getIntAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getValueOnKeyword_0_0()); }
		'on'
		{ after(grammarAccess.getStateAccess().getValueOnKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateAccess().getValueOffKeyword_0_1()); }
		'off'
		{ after(grammarAccess.getStateAccess().getValueOffKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getTypeAssignment_0()); }
	(rule__Rule__TypeAssignment_0)
	{ after(grammarAccess.getRuleAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
	(rule__Rule__ConditionAssignment_1)
	{ after(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getBodyAssignment_3()); }
	(rule__Rule__BodyAssignment_3)
	{ after(grammarAccess.getRuleAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLeftAssignment_0()); }
	(rule__Condition__LeftAssignment_0)
	{ after(grammarAccess.getConditionAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getOperatorAssignment_1()); }
	(rule__Condition__OperatorAssignment_1)
	{ after(grammarAccess.getConditionAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getRightAssignment_2()); }
	(rule__Condition__RightAssignment_2)
	{ after(grammarAccess.getConditionAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__0__Impl
	rule__Exp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getFactorParserRuleCall_0()); }
	ruleFactor
	{ after(grammarAccess.getExpAccess().getFactorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getGroup_1()); }
	(rule__Exp__Group_1__0)*
	{ after(grammarAccess.getExpAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__0__Impl
	rule__Exp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getExpLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpAccess().getExpLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__1__Impl
	rule__Exp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getOperatorAssignment_1_1()); }
	(rule__Exp__OperatorAssignment_1_1)
	{ after(grammarAccess.getExpAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getRightAssignment_1_2()); }
	(rule__Exp__RightAssignment_1_2)
	{ after(grammarAccess.getExpAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getValueParserRuleCall_0()); }
	ruleValue
	{ after(grammarAccess.getFactorAccess().getValueParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getGroup_1()); }
	(rule__Factor__Group_1__0)*
	{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getFactorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getFactorAccess().getFactorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
	(rule__Factor__OperatorAssignment_1_1)
	{ after(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
	(rule__Factor__RightAssignment_1_2)
	{ after(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpWeakOp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpWeakOp__Group_0__0__Impl
	rule__ExpWeakOp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpWeakOpAccess().getPlusAction_0_0()); }
	()
	{ after(grammarAccess.getExpWeakOpAccess().getPlusAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpWeakOp__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpWeakOpAccess().getPlusSignKeyword_0_1()); }
	'+'
	{ after(grammarAccess.getExpWeakOpAccess().getPlusSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpWeakOp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpWeakOp__Group_1__0__Impl
	rule__ExpWeakOp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpWeakOpAccess().getMinusAction_1_0()); }
	()
	{ after(grammarAccess.getExpWeakOpAccess().getMinusAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpWeakOp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpWeakOp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpWeakOpAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getExpWeakOpAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpStrongOp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpStrongOp__Group_0__0__Impl
	rule__ExpStrongOp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpStrongOpAccess().getMultAction_0_0()); }
	()
	{ after(grammarAccess.getExpStrongOpAccess().getMultAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpStrongOp__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpStrongOpAccess().getAsteriskKeyword_0_1()); }
	'*'
	{ after(grammarAccess.getExpStrongOpAccess().getAsteriskKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpStrongOp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpStrongOp__Group_1__0__Impl
	rule__ExpStrongOp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpStrongOpAccess().getDivAction_1_0()); }
	()
	{ after(grammarAccess.getExpStrongOpAccess().getDivAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpStrongOp__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpStrongOp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpStrongOpAccess().getSolidusKeyword_1_1()); }
	'/'
	{ after(grammarAccess.getExpStrongOpAccess().getSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
	(rule__Attribute__NameAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getComponentAssignment_1()); }
	(rule__Attribute__ComponentAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getComponentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delta__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delta__Group__0__Impl
	rule__Delta__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delta__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeltaAccess().getAttrAssignment_0()); }
	(rule__Delta__AttrAssignment_0)
	{ after(grammarAccess.getDeltaAccess().getAttrAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delta__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delta__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delta__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeltaAccess().getDeltaKeyword_1()); }
	'delta'
	{ after(grammarAccess.getDeltaAccess().getDeltaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__0__Impl
	rule__NUMBER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getGroup_1()); }
	(rule__NUMBER__Group_1__0)?
	{ after(grammarAccess.getNUMBERAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group_1__0__Impl
	rule__NUMBER__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NUMBER__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAttributeAssignment_0()); }
	(rule__Assignment__AttributeAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getAttributeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNameAssignment_0()); }
	(rule__Node__NameAssignment_0)
	{ after(grammarAccess.getNodeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__2__Impl
	rule__Node__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getNodeAccess().getComponentsAssignment_2()); }
		(rule__Node__ComponentsAssignment_2)
		{ after(grammarAccess.getNodeAccess().getComponentsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getNodeAccess().getComponentsAssignment_2()); }
		(rule__Node__ComponentsAssignment_2)*
		{ after(grammarAccess.getNodeAccess().getComponentsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getNameAssignment_0()); }
	(rule__Component__NameAssignment_0)
	{ after(grammarAccess.getComponentAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Component__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentAccess().getPropertiesAssignment_1()); }
	(rule__Component__PropertiesAssignment_1)
	{ after(grammarAccess.getComponentAccess().getPropertiesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__0__Impl
	rule__ComponentBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getIoAssignment_0()); }
	(rule__ComponentBody__IoAssignment_0)
	{ after(grammarAccess.getComponentBodyAccess().getIoAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__1__Impl
	rule__ComponentBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getTypeAssignment_1()); }
	(rule__ComponentBody__TypeAssignment_1)
	{ after(grammarAccess.getComponentBodyAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__2__Impl
	rule__ComponentBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getPinKeyword_2()); }
	'pin'
	{ after(grammarAccess.getComponentBodyAccess().getPinKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__3__Impl
	rule__ComponentBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getPinAssignment_3()); }
	(rule__ComponentBody__PinAssignment_3)
	{ after(grammarAccess.getComponentBodyAccess().getPinAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__4__Impl
	rule__ComponentBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getMapAssignment_4()); }
	(rule__ComponentBody__MapAssignment_4)?
	{ after(grammarAccess.getComponentBodyAccess().getMapAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__5__Impl
	rule__ComponentBody__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getRateAssignment_5()); }
	(rule__ComponentBody__RateAssignment_5)?
	{ after(grammarAccess.getComponentBodyAccess().getRateAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComponentBody__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComponentBodyAccess().getSmoothingAssignment_6()); }
	(rule__ComponentBody__SmoothingAssignment_6)?
	{ after(grammarAccess.getComponentBodyAccess().getSmoothingAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__0__Impl
	rule__Map__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getMapKeyword_0()); }
	'map'
	{ after(grammarAccess.getMapAccess().getMapKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__1__Impl
	rule__Map__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getInAssignment_1()); }
	(rule__Map__InAssignment_1)
	{ after(grammarAccess.getMapAccess().getInAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__2__Impl
	rule__Map__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getEqualsSignGreaterThanSignKeyword_2()); }
	'=>'
	{ after(grammarAccess.getMapAccess().getEqualsSignGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getOutAssignment_3()); }
	(rule__Map__OutAssignment_3)
	{ after(grammarAccess.getMapAccess().getOutAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getLowAssignment_0()); }
	(rule__Range__LowAssignment_0)
	{ after(grammarAccess.getRangeAccess().getLowAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getRangeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Range__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeAccess().getHighAssignment_2()); }
	(rule__Range__HighAssignment_2)
	{ after(grammarAccess.getRangeAccess().getHighAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rate__Group__0__Impl
	rule__Rate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRateAccess().getRateKeyword_0()); }
	'rate'
	{ after(grammarAccess.getRateAccess().getRateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rate__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRateAccess().getValueAssignment_1()); }
	(rule__Rate__ValueAssignment_1)
	{ after(grammarAccess.getRateAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Smoothing__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smoothing__Group__0__Impl
	rule__Smoothing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smoothing__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmoothingAccess().getSmoothingKeyword_0()); }
	'smoothing'
	{ after(grammarAccess.getSmoothingAccess().getSmoothingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smoothing__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smoothing__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smoothing__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmoothingAccess().getValueAssignment_1()); }
	(rule__Smoothing__ValueAssignment_1)
	{ after(grammarAccess.getSmoothingAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__ProgramAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProgramAlternatives_0()); }
		(rule__Program__ProgramAlternatives_0)
		{ after(grammarAccess.getProgramAccess().getProgramAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getTypeAlternatives_0_0()); }
		(rule__Rule__TypeAlternatives_0_0)
		{ after(grammarAccess.getRuleAccess().getTypeAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getBodyRuleBodyParserRuleCall_3_0()); }
		ruleRuleBody
		{ after(grammarAccess.getRuleAccess().getBodyRuleBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getLeftExpParserRuleCall_0_0()); }
		ruleExp
		{ after(grammarAccess.getConditionAccess().getLeftExpParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getOperatorBOOLEAN_OPERATORTerminalRuleCall_1_0()); }
		RULE_BOOLEAN_OPERATOR
		{ after(grammarAccess.getConditionAccess().getOperatorBOOLEAN_OPERATORTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getRightExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getConditionAccess().getRightExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getOperatorExpWeakOpParserRuleCall_1_1_0()); }
		ruleExpWeakOp
		{ after(grammarAccess.getExpAccess().getOperatorExpWeakOpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_2_0()); }
		ruleFactor
		{ after(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getOperatorExpStrongOpParserRuleCall_1_1_0()); }
		ruleExpStrongOp
		{ after(grammarAccess.getFactorAccess().getOperatorExpStrongOpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getRightValueParserRuleCall_1_2_0()); }
		ruleValue
		{ after(grammarAccess.getFactorAccess().getRightValueParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameNodeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getNameNodeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAttributeAccess().getNameNodeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAttributeAccess().getNameNodeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ComponentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getComponentComponentCrossReference_1_0()); }
		(
			{ before(grammarAccess.getAttributeAccess().getComponentComponentIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAttributeAccess().getComponentComponentIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getAttributeAccess().getComponentComponentCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delta__AttrAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeltaAccess().getAttrAttributeParserRuleCall_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getDeltaAccess().getAttrAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__FloatAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getFloatDECIMALTerminalRuleCall_0_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getNumberLiteralAccess().getFloatDECIMALTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__IntAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getIntINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberLiteralAccess().getIntINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getValueAlternatives_0()); }
		(rule__State__ValueAlternatives_0)
		{ after(grammarAccess.getStateAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleBody__AssignmentAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleBodyAccess().getAssignmentAssignmentParserRuleCall_0()); }
		ruleAssignment
		{ after(grammarAccess.getRuleBodyAccess().getAssignmentAssignmentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AttributeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getAttributeAttributeParserRuleCall_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getAssignmentAccess().getAttributeAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueExpParserRuleCall_2_0()); }
		ruleExp
		{ after(grammarAccess.getAssignmentAccess().getValueExpParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__ComponentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getComponentsComponentParserRuleCall_2_0()); }
		ruleComponent
		{ after(grammarAccess.getNodeAccess().getComponentsComponentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__PropertiesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getPropertiesComponentBodyParserRuleCall_1_0()); }
		ruleComponentBody
		{ after(grammarAccess.getComponentAccess().getPropertiesComponentBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__IoAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentBodyAccess().getIoIOTerminalRuleCall_0_0()); }
		RULE_IO
		{ after(grammarAccess.getComponentBodyAccess().getIoIOTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentBodyAccess().getTypeTYPETerminalRuleCall_1_0()); }
		RULE_TYPE
		{ after(grammarAccess.getComponentBodyAccess().getTypeTYPETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__PinAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentBodyAccess().getPinINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getComponentBodyAccess().getPinINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__MapAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentBodyAccess().getMapMapParserRuleCall_4_0()); }
		ruleMap
		{ after(grammarAccess.getComponentBodyAccess().getMapMapParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__RateAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentBodyAccess().getRateRateParserRuleCall_5_0()); }
		ruleRate
		{ after(grammarAccess.getComponentBodyAccess().getRateRateParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentBody__SmoothingAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentBodyAccess().getSmoothingSmoothingParserRuleCall_6_0()); }
		ruleSmoothing
		{ after(grammarAccess.getComponentBodyAccess().getSmoothingSmoothingParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__InAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAccess().getInRangeParserRuleCall_1_0()); }
		ruleRange
		{ after(grammarAccess.getMapAccess().getInRangeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__OutAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAccess().getOutRangeParserRuleCall_3_0()); }
		ruleRange
		{ after(grammarAccess.getMapAccess().getOutRangeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__LowAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getLowNUMBERParserRuleCall_0_0()); }
		ruleNUMBER
		{ after(grammarAccess.getRangeAccess().getLowNUMBERParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__HighAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getHighNUMBERParserRuleCall_2_0()); }
		ruleNUMBER
		{ after(grammarAccess.getRangeAccess().getHighNUMBERParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rate__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRateAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getRateAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smoothing__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmoothingAccess().getValueNUMBERParserRuleCall_1_0()); }
		ruleNUMBER
		{ after(grammarAccess.getSmoothingAccess().getValueNUMBERParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BOOLEAN_OPERATOR : ('<'|'>'|'>='|'<='|'=='|'!=');

RULE_DECIMAL : RULE_INT '.' RULE_INT;

RULE_IO : ('input'|'output');

RULE_TYPE : ('analog'|'digital');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
