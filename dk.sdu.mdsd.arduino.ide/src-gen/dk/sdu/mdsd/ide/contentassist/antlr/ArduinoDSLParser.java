/*
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mdsd.ide.contentassist.antlr.internal.InternalArduinoDSLParser;
import dk.sdu.mdsd.services.ArduinoDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ArduinoDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ArduinoDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ArduinoDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProgramAccess().getProgramAlternatives_0(), "rule__Program__ProgramAlternatives_0");
			builder.put(grammarAccess.getRuleAccess().getTypeAlternatives_0_0(), "rule__Rule__TypeAlternatives_0_0");
			builder.put(grammarAccess.getExpWeakOpAccess().getAlternatives(), "rule__ExpWeakOp__Alternatives");
			builder.put(grammarAccess.getExpStrongOpAccess().getAlternatives(), "rule__ExpStrongOp__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getExpWeakOpAccess().getGroup_0(), "rule__ExpWeakOp__Group_0__0");
			builder.put(grammarAccess.getExpWeakOpAccess().getGroup_1(), "rule__ExpWeakOp__Group_1__0");
			builder.put(grammarAccess.getExpStrongOpAccess().getGroup_0(), "rule__ExpStrongOp__Group_0__0");
			builder.put(grammarAccess.getExpStrongOpAccess().getGroup_1(), "rule__ExpStrongOp__Group_1__0");
			builder.put(grammarAccess.getValueAccess().getGroup_0(), "rule__Value__Group_0__0");
			builder.put(grammarAccess.getValueAccess().getGroup_3(), "rule__Value__Group_3__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getDeltaAccess().getGroup(), "rule__Delta__Group__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup(), "rule__NUMBER__Group__0");
			builder.put(grammarAccess.getNUMBERAccess().getGroup_1(), "rule__NUMBER__Group_1__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getComponentBodyAccess().getGroup(), "rule__ComponentBody__Group__0");
			builder.put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
			builder.put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
			builder.put(grammarAccess.getRateAccess().getGroup(), "rule__Rate__Group__0");
			builder.put(grammarAccess.getSmoothingAccess().getGroup(), "rule__Smoothing__Group__0");
			builder.put(grammarAccess.getProgramAccess().getProgramAssignment(), "rule__Program__ProgramAssignment");
			builder.put(grammarAccess.getRuleAccess().getTypeAssignment_0(), "rule__Rule__TypeAssignment_0");
			builder.put(grammarAccess.getRuleAccess().getConditionAssignment_1(), "rule__Rule__ConditionAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getBodyAssignment_3(), "rule__Rule__BodyAssignment_3");
			builder.put(grammarAccess.getConditionAccess().getLeftAssignment_0(), "rule__Condition__LeftAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getOperatorAssignment_1(), "rule__Condition__OperatorAssignment_1");
			builder.put(grammarAccess.getConditionAccess().getRightAssignment_2(), "rule__Condition__RightAssignment_2");
			builder.put(grammarAccess.getExpAccess().getOperatorAssignment_1_1(), "rule__Exp__OperatorAssignment_1_1");
			builder.put(grammarAccess.getExpAccess().getRightAssignment_1_2(), "rule__Exp__RightAssignment_1_2");
			builder.put(grammarAccess.getFactorAccess().getOperatorAssignment_1_1(), "rule__Factor__OperatorAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getRightAssignment_1_2(), "rule__Factor__RightAssignment_1_2");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getComponentAssignment_1(), "rule__Attribute__ComponentAssignment_1");
			builder.put(grammarAccess.getRuleBodyAccess().getAssignmentAssignment(), "rule__RuleBody__AssignmentAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getAttributeAssignment_0(), "rule__Assignment__AttributeAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_0(), "rule__Node__NameAssignment_0");
			builder.put(grammarAccess.getNodeAccess().getComponentsAssignment_2(), "rule__Node__ComponentsAssignment_2");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_0(), "rule__Component__NameAssignment_0");
			builder.put(grammarAccess.getComponentAccess().getPropertiesAssignment_1(), "rule__Component__PropertiesAssignment_1");
			builder.put(grammarAccess.getComponentBodyAccess().getIoAssignment_0(), "rule__ComponentBody__IoAssignment_0");
			builder.put(grammarAccess.getComponentBodyAccess().getTypeAssignment_1(), "rule__ComponentBody__TypeAssignment_1");
			builder.put(grammarAccess.getComponentBodyAccess().getPinAssignment_3(), "rule__ComponentBody__PinAssignment_3");
			builder.put(grammarAccess.getComponentBodyAccess().getMapAssignment_4(), "rule__ComponentBody__MapAssignment_4");
			builder.put(grammarAccess.getComponentBodyAccess().getRateAssignment_5(), "rule__ComponentBody__RateAssignment_5");
			builder.put(grammarAccess.getComponentBodyAccess().getSmoothingAssignment_6(), "rule__ComponentBody__SmoothingAssignment_6");
			builder.put(grammarAccess.getMapAccess().getInAssignment_1(), "rule__Map__InAssignment_1");
			builder.put(grammarAccess.getMapAccess().getOutAssignment_3(), "rule__Map__OutAssignment_3");
			builder.put(grammarAccess.getRangeAccess().getLowAssignment_0(), "rule__Range__LowAssignment_0");
			builder.put(grammarAccess.getRangeAccess().getHighAssignment_2(), "rule__Range__HighAssignment_2");
			builder.put(grammarAccess.getRateAccess().getValueAssignment_1(), "rule__Rate__ValueAssignment_1");
			builder.put(grammarAccess.getSmoothingAccess().getValueAssignment_1(), "rule__Smoothing__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ArduinoDSLGrammarAccess grammarAccess;

	@Override
	protected InternalArduinoDSLParser createParser() {
		InternalArduinoDSLParser result = new InternalArduinoDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ArduinoDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ArduinoDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
