/*
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArduinoDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Program");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cProgramAlternatives_0 = (Alternatives)cProgramAssignment.eContents().get(0);
		private final RuleCall cProgramRuleParserRuleCall_0_0 = (RuleCall)cProgramAlternatives_0.eContents().get(0);
		private final RuleCall cProgramNodeParserRuleCall_0_1 = (RuleCall)cProgramAlternatives_0.eContents().get(1);
		
		//Program:
		//	program+=(Rule | Node)*;
		@Override public ParserRule getRule() { return rule; }
		
		//program+=(Rule | Node)*
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//(Rule | Node)
		public Alternatives getProgramAlternatives_0() { return cProgramAlternatives_0; }
		
		//Rule
		public RuleCall getProgramRuleParserRuleCall_0_0() { return cProgramRuleParserRuleCall_0_0; }
		
		//Node
		public RuleCall getProgramNodeParserRuleCall_0_1() { return cProgramNodeParserRuleCall_0_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeWhenKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeOnceKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyRuleBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rule:
		//	type=('when' | 'once') condition=Condition '{' body=RuleBody '}';
		@Override public ParserRule getRule() { return rule; }
		
		//type=('when' | 'once') condition=Condition '{' body=RuleBody '}'
		public Group getGroup() { return cGroup; }
		
		//type=('when' | 'once')
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//('when' | 'once')
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//'when'
		public Keyword getTypeWhenKeyword_0_0_0() { return cTypeWhenKeyword_0_0_0; }
		
		//'once'
		public Keyword getTypeOnceKeyword_0_0_1() { return cTypeOnceKeyword_0_0_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//body=RuleBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//RuleBody
		public RuleCall getBodyRuleBodyParserRuleCall_3_0() { return cBodyRuleBodyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorBOOLEAN_OPERATORTerminalRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Condition:
		//	left=Exp operator=BOOLEAN_OPERATOR right=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Exp operator=BOOLEAN_OPERATOR right=Exp
		public Group getGroup() { return cGroup; }
		
		//left=Exp
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Exp
		public RuleCall getLeftExpParserRuleCall_0_0() { return cLeftExpParserRuleCall_0_0; }
		
		//operator=BOOLEAN_OPERATOR
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//BOOLEAN_OPERATOR
		public RuleCall getOperatorBOOLEAN_OPERATORTerminalRuleCall_1_0() { return cOperatorBOOLEAN_OPERATORTerminalRuleCall_1_0; }
		
		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExpWeakOpParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Exp Expression:
		//	Factor ({Exp.left=current} operator=ExpWeakOp right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor ({Exp.left=current} operator=ExpWeakOp right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//({Exp.left=current} operator=ExpWeakOp right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exp.left=current}
		public Action getExpLeftAction_1_0() { return cExpLeftAction_1_0; }
		
		//operator=ExpWeakOp
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExpWeakOp
		public RuleCall getOperatorExpWeakOpParserRuleCall_1_1_0() { return cOperatorExpWeakOpParserRuleCall_1_1_0; }
		
		//right=Factor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_2_0() { return cRightFactorParserRuleCall_1_2_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorExpStrongOpParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Factor Expression:
		//	Value ({Factor.left=current} operator=ExpStrongOp right=Value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Value ({Factor.left=current} operator=ExpStrongOp right=Value)*
		public Group getGroup() { return cGroup; }
		
		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }
		
		//({Factor.left=current} operator=ExpStrongOp right=Value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }
		
		//operator=ExpStrongOp
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ExpStrongOp
		public RuleCall getOperatorExpStrongOpParserRuleCall_1_1_0() { return cOperatorExpStrongOpParserRuleCall_1_1_0; }
		
		//right=Value
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Value
		public RuleCall getRightValueParserRuleCall_1_2_0() { return cRightValueParserRuleCall_1_2_0; }
	}
	public class ExpWeakOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.ExpWeakOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPlusAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExpWeakOp:
		//	{Plus} '+' | {Minus} '-';
		@Override public ParserRule getRule() { return rule; }
		
		//{Plus} '+' | {Minus} '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Plus} '+'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Plus}
		public Action getPlusAction_0_0() { return cPlusAction_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//{Minus} '-'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Minus}
		public Action getMinusAction_1_0() { return cMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}
	public class ExpStrongOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.ExpStrongOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMultAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDivAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExpStrongOp:
		//	{Mult} '*' | {Div} '/';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mult} '*' | {Div} '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Mult} '*'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Mult}
		public Action getMultAction_0_0() { return cMultAction_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }
		
		//{Div} '/'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Div}
		public Action getDivAction_1_0() { return cDivAction_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cNUMBERParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeltaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cSTATETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//Value:
		//	{Value} NUMBER | Attribute | Delta | {Value} STATE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Value} NUMBER | Attribute | Delta | {Value} STATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Value} NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		//{Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }
		
		//NUMBER
		public RuleCall getNUMBERParserRuleCall_0_1() { return cNUMBERParserRuleCall_0_1; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_1() { return cAttributeParserRuleCall_1; }
		
		//Delta
		public RuleCall getDeltaParserRuleCall_2() { return cDeltaParserRuleCall_2; }
		
		//{Value} STATE
		public Group getGroup_3() { return cGroup_3; }
		
		//{Value}
		public Action getValueAction_3_0() { return cValueAction_3_0; }
		
		//STATE
		public RuleCall getSTATETerminalRuleCall_3_1() { return cSTATETerminalRuleCall_3_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameNodeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameNodeIDTerminalRuleCall_0_0_1 = (RuleCall)cNameNodeCrossReference_0_0.eContents().get(1);
		private final Assignment cComponentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentComponentCrossReference_1_0 = (CrossReference)cComponentAssignment_1.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_1_0_1 = (RuleCall)cComponentComponentCrossReference_1_0.eContents().get(1);
		
		//Attribute:
		//	name=[Node] component=[Component];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Node] component=[Component]
		public Group getGroup() { return cGroup; }
		
		//name=[Node]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Node]
		public CrossReference getNameNodeCrossReference_0_0() { return cNameNodeCrossReference_0_0; }
		
		//ID
		public RuleCall getNameNodeIDTerminalRuleCall_0_0_1() { return cNameNodeIDTerminalRuleCall_0_0_1; }
		
		//component=[Component]
		public Assignment getComponentAssignment_1() { return cComponentAssignment_1; }
		
		//[Component]
		public CrossReference getComponentComponentCrossReference_1_0() { return cComponentComponentCrossReference_1_0; }
		
		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_1_0_1() { return cComponentComponentIDTerminalRuleCall_1_0_1; }
	}
	public class DeltaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Delta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cDeltaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Delta:
		//	Attribute 'delta';
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute 'delta'
		public Group getGroup() { return cGroup; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//'delta'
		public Keyword getDeltaKeyword_1() { return cDeltaKeyword_1; }
	}
	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NUMBER ecore::EFloat:
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	public class RuleBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.RuleBody");
		private final Assignment cAssignmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssignmentAssignmentParserRuleCall_0 = (RuleCall)cAssignmentAssignment.eContents().get(0);
		
		//RuleBody:
		//	assignment+=Assignment+;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment+=Assignment+
		public Assignment getAssignmentAssignment() { return cAssignmentAssignment; }
		
		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_0() { return cAssignmentAssignmentParserRuleCall_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributeAttributeParserRuleCall_0_0 = (RuleCall)cAttributeAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment:
		//	attribute=Attribute "=" value=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=Attribute "=" value=Exp
		public Group getGroup() { return cGroup; }
		
		//attribute=Attribute
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_0_0() { return cAttributeAttributeParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Exp
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Exp
		public RuleCall getValueExpParserRuleCall_2_0() { return cValueExpParserRuleCall_2_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentsComponentParserRuleCall_2_0 = (RuleCall)cComponentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Node:
		//	name=ID '{' components+=Component+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' components+=Component+ '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//components+=Component+
		public Assignment getComponentsAssignment_2() { return cComponentsAssignment_2; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_2_0() { return cComponentsComponentParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesComponentBodyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		//Component:
		//	name=ID properties=ComponentBody;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID properties=ComponentBody
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//properties=ComponentBody
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//ComponentBody
		public RuleCall getPropertiesComponentBodyParserRuleCall_1_0() { return cPropertiesComponentBodyParserRuleCall_1_0; }
	}
	public class ComponentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.ComponentBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIoIOTerminalRuleCall_0_0 = (RuleCall)cIoAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTYPETerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cPinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPinINTTerminalRuleCall_3_0 = (RuleCall)cPinAssignment_3.eContents().get(0);
		private final Assignment cMapAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMapMapParserRuleCall_4_0 = (RuleCall)cMapAssignment_4.eContents().get(0);
		private final Assignment cRateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRateRateParserRuleCall_5_0 = (RuleCall)cRateAssignment_5.eContents().get(0);
		private final Assignment cSmoothingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSmoothingSmoothingParserRuleCall_6_0 = (RuleCall)cSmoothingAssignment_6.eContents().get(0);
		
		//ComponentBody:
		//	io=IO type=TYPE 'pin' pin=INT map=Map? rate=Rate? smoothing=Smoothing?;
		@Override public ParserRule getRule() { return rule; }
		
		//io=IO type=TYPE 'pin' pin=INT map=Map? rate=Rate? smoothing=Smoothing?
		public Group getGroup() { return cGroup; }
		
		//io=IO
		public Assignment getIoAssignment_0() { return cIoAssignment_0; }
		
		//IO
		public RuleCall getIoIOTerminalRuleCall_0_0() { return cIoIOTerminalRuleCall_0_0; }
		
		//type=TYPE
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TYPE
		public RuleCall getTypeTYPETerminalRuleCall_1_0() { return cTypeTYPETerminalRuleCall_1_0; }
		
		//'pin'
		public Keyword getPinKeyword_2() { return cPinKeyword_2; }
		
		//pin=INT
		public Assignment getPinAssignment_3() { return cPinAssignment_3; }
		
		//INT
		public RuleCall getPinINTTerminalRuleCall_3_0() { return cPinINTTerminalRuleCall_3_0; }
		
		//map=Map?
		public Assignment getMapAssignment_4() { return cMapAssignment_4; }
		
		//Map
		public RuleCall getMapMapParserRuleCall_4_0() { return cMapMapParserRuleCall_4_0; }
		
		//rate=Rate?
		public Assignment getRateAssignment_5() { return cRateAssignment_5; }
		
		//Rate
		public RuleCall getRateRateParserRuleCall_5_0() { return cRateRateParserRuleCall_5_0; }
		
		//smoothing=Smoothing?
		public Assignment getSmoothingAssignment_6() { return cSmoothingAssignment_6; }
		
		//Smoothing
		public RuleCall getSmoothingSmoothingParserRuleCall_6_0() { return cSmoothingSmoothingParserRuleCall_6_0; }
	}
	public class MapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Map");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInRangeParserRuleCall_1_0 = (RuleCall)cInAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOutAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutRangeParserRuleCall_3_0 = (RuleCall)cOutAssignment_3.eContents().get(0);
		
		//Map:
		//	'map' in=Range '=>' out=Range;
		@Override public ParserRule getRule() { return rule; }
		
		//'map' in=Range '=>' out=Range
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//in=Range
		public Assignment getInAssignment_1() { return cInAssignment_1; }
		
		//Range
		public RuleCall getInRangeParserRuleCall_1_0() { return cInRangeParserRuleCall_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//out=Range
		public Assignment getOutAssignment_3() { return cOutAssignment_3; }
		
		//Range
		public RuleCall getOutRangeParserRuleCall_3_0() { return cOutRangeParserRuleCall_3_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowNUMBERParserRuleCall_0_0 = (RuleCall)cLowAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHighAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHighNUMBERParserRuleCall_2_0 = (RuleCall)cHighAssignment_2.eContents().get(0);
		
		//Range:
		//	low=NUMBER ':' high=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//low=NUMBER ':' high=NUMBER
		public Group getGroup() { return cGroup; }
		
		//low=NUMBER
		public Assignment getLowAssignment_0() { return cLowAssignment_0; }
		
		//NUMBER
		public RuleCall getLowNUMBERParserRuleCall_0_0() { return cLowNUMBERParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//high=NUMBER
		public Assignment getHighAssignment_2() { return cHighAssignment_2; }
		
		//NUMBER
		public RuleCall getHighNUMBERParserRuleCall_2_0() { return cHighNUMBERParserRuleCall_2_0; }
	}
	public class RateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Rate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Rate:
		//	'rate' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'rate' value=INT
		public Group getGroup() { return cGroup; }
		
		//'rate'
		public Keyword getRateKeyword_0() { return cRateKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class SmoothingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.Smoothing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmoothingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Smoothing:
		//	'smoothing' value=NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//'smoothing' value=NUMBER
		public Group getGroup() { return cGroup; }
		
		//'smoothing'
		public Keyword getSmoothingKeyword_0() { return cSmoothingKeyword_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_1_0() { return cValueNUMBERParserRuleCall_1_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final ExpWeakOpElements pExpWeakOp;
	private final ExpStrongOpElements pExpStrongOp;
	private final TerminalRule tBOOLEAN_OPERATOR;
	private final ValueElements pValue;
	private final AttributeElements pAttribute;
	private final DeltaElements pDelta;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tSTATE;
	private final RuleBodyElements pRuleBody;
	private final AssignmentElements pAssignment;
	private final NodeElements pNode;
	private final ComponentElements pComponent;
	private final ComponentBodyElements pComponentBody;
	private final TerminalRule tIO;
	private final TerminalRule tTYPE;
	private final MapElements pMap;
	private final RangeElements pRange;
	private final RateElements pRate;
	private final SmoothingElements pSmoothing;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArduinoDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pExpWeakOp = new ExpWeakOpElements();
		this.pExpStrongOp = new ExpStrongOpElements();
		this.tBOOLEAN_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.BOOLEAN_OPERATOR");
		this.pValue = new ValueElements();
		this.pAttribute = new AttributeElements();
		this.pDelta = new DeltaElements();
		this.pNUMBER = new NUMBERElements();
		this.tSTATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.STATE");
		this.pRuleBody = new RuleBodyElements();
		this.pAssignment = new AssignmentElements();
		this.pNode = new NodeElements();
		this.pComponent = new ComponentElements();
		this.pComponentBody = new ComponentBodyElements();
		this.tIO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.IO");
		this.tTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ArduinoDSL.TYPE");
		this.pMap = new MapElements();
		this.pRange = new RangeElements();
		this.pRate = new RateElements();
		this.pSmoothing = new SmoothingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mdsd.ArduinoDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	program+=(Rule | Node)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Rule:
	//	type=('when' | 'once') condition=Condition '{' body=RuleBody '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition:
	//	left=Exp operator=BOOLEAN_OPERATOR right=Exp;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Exp Expression:
	//	Factor ({Exp.left=current} operator=ExpWeakOp right=Factor)*;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor Expression:
	//	Value ({Factor.left=current} operator=ExpStrongOp right=Value)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//ExpWeakOp:
	//	{Plus} '+' | {Minus} '-';
	public ExpWeakOpElements getExpWeakOpAccess() {
		return pExpWeakOp;
	}
	
	public ParserRule getExpWeakOpRule() {
		return getExpWeakOpAccess().getRule();
	}
	
	//ExpStrongOp:
	//	{Mult} '*' | {Div} '/';
	public ExpStrongOpElements getExpStrongOpAccess() {
		return pExpStrongOp;
	}
	
	public ParserRule getExpStrongOpRule() {
		return getExpStrongOpAccess().getRule();
	}
	
	//terminal BOOLEAN_OPERATOR:
	//	'<' | '>' | '>=' | '<=' | '==' | '!=';
	public TerminalRule getBOOLEAN_OPERATORRule() {
		return tBOOLEAN_OPERATOR;
	}
	
	//Value:
	//	{Value} NUMBER | Attribute | Delta | {Value} STATE;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Attribute:
	//	name=[Node] component=[Component];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Delta:
	//	Attribute 'delta';
	public DeltaElements getDeltaAccess() {
		return pDelta;
	}
	
	public ParserRule getDeltaRule() {
		return getDeltaAccess().getRule();
	}
	
	//NUMBER ecore::EFloat:
	//	INT ('.' INT)?;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}
	
	//terminal STATE:
	//	'on' | 'off';
	public TerminalRule getSTATERule() {
		return tSTATE;
	}
	
	//RuleBody:
	//	assignment+=Assignment+;
	public RuleBodyElements getRuleBodyAccess() {
		return pRuleBody;
	}
	
	public ParserRule getRuleBodyRule() {
		return getRuleBodyAccess().getRule();
	}
	
	//Assignment:
	//	attribute=Attribute "=" value=Exp;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Node:
	//	name=ID '{' components+=Component+ '}';
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Component:
	//	name=ID properties=ComponentBody;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//ComponentBody:
	//	io=IO type=TYPE 'pin' pin=INT map=Map? rate=Rate? smoothing=Smoothing?;
	public ComponentBodyElements getComponentBodyAccess() {
		return pComponentBody;
	}
	
	public ParserRule getComponentBodyRule() {
		return getComponentBodyAccess().getRule();
	}
	
	//terminal IO:
	//	'input' | 'output';
	public TerminalRule getIORule() {
		return tIO;
	}
	
	//terminal TYPE:
	//	'analog' | 'digital';
	public TerminalRule getTYPERule() {
		return tTYPE;
	}
	
	//Map:
	//	'map' in=Range '=>' out=Range;
	public MapElements getMapAccess() {
		return pMap;
	}
	
	public ParserRule getMapRule() {
		return getMapAccess().getRule();
	}
	
	//Range:
	//	low=NUMBER ':' high=NUMBER;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Rate:
	//	'rate' value=INT;
	public RateElements getRateAccess() {
		return pRate;
	}
	
	public ParserRule getRateRule() {
		return getRateAccess().getRule();
	}
	
	//Smoothing:
	//	'smoothing' value=NUMBER;
	public SmoothingElements getSmoothingAccess() {
		return pSmoothing;
	}
	
	public ParserRule getSmoothingRule() {
		return getSmoothingAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
