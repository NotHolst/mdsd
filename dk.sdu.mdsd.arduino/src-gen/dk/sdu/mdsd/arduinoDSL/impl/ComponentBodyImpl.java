/**
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.arduinoDSL.impl;

import dk.sdu.mdsd.arduinoDSL.ArduinoDSLPackage;
import dk.sdu.mdsd.arduinoDSL.ComponentBody;
import dk.sdu.mdsd.arduinoDSL.Map;
import dk.sdu.mdsd.arduinoDSL.Rate;
import dk.sdu.mdsd.arduinoDSL.Smoothing;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component Body</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mdsd.arduinoDSL.impl.ComponentBodyImpl#getIo <em>Io</em>}</li>
 *   <li>{@link dk.sdu.mdsd.arduinoDSL.impl.ComponentBodyImpl#getType <em>Type</em>}</li>
 *   <li>{@link dk.sdu.mdsd.arduinoDSL.impl.ComponentBodyImpl#getPin <em>Pin</em>}</li>
 *   <li>{@link dk.sdu.mdsd.arduinoDSL.impl.ComponentBodyImpl#getMap <em>Map</em>}</li>
 *   <li>{@link dk.sdu.mdsd.arduinoDSL.impl.ComponentBodyImpl#getRate <em>Rate</em>}</li>
 *   <li>{@link dk.sdu.mdsd.arduinoDSL.impl.ComponentBodyImpl#getSmoothing <em>Smoothing</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentBodyImpl extends MinimalEObjectImpl.Container implements ComponentBody
{
  /**
   * The default value of the '{@link #getIo() <em>Io</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIo()
   * @generated
   * @ordered
   */
  protected static final String IO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIo() <em>Io</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIo()
   * @generated
   * @ordered
   */
  protected String io = IO_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getPin() <em>Pin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPin()
   * @generated
   * @ordered
   */
  protected static final int PIN_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPin() <em>Pin</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPin()
   * @generated
   * @ordered
   */
  protected int pin = PIN_EDEFAULT;

  /**
   * The cached value of the '{@link #getMap() <em>Map</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMap()
   * @generated
   * @ordered
   */
  protected Map map;

  /**
   * The cached value of the '{@link #getRate() <em>Rate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRate()
   * @generated
   * @ordered
   */
  protected Rate rate;

  /**
   * The cached value of the '{@link #getSmoothing() <em>Smoothing</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSmoothing()
   * @generated
   * @ordered
   */
  protected Smoothing smoothing;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentBodyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArduinoDSLPackage.Literals.COMPONENT_BODY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIo()
  {
    return io;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIo(String newIo)
  {
    String oldIo = io;
    io = newIo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__IO, oldIo, io));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPin()
  {
    return pin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPin(int newPin)
  {
    int oldPin = pin;
    pin = newPin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__PIN, oldPin, pin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map getMap()
  {
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMap(Map newMap, NotificationChain msgs)
  {
    Map oldMap = map;
    map = newMap;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__MAP, oldMap, newMap);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMap(Map newMap)
  {
    if (newMap != map)
    {
      NotificationChain msgs = null;
      if (map != null)
        msgs = ((InternalEObject)map).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArduinoDSLPackage.COMPONENT_BODY__MAP, null, msgs);
      if (newMap != null)
        msgs = ((InternalEObject)newMap).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArduinoDSLPackage.COMPONENT_BODY__MAP, null, msgs);
      msgs = basicSetMap(newMap, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__MAP, newMap, newMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rate getRate()
  {
    return rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRate(Rate newRate, NotificationChain msgs)
  {
    Rate oldRate = rate;
    rate = newRate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__RATE, oldRate, newRate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRate(Rate newRate)
  {
    if (newRate != rate)
    {
      NotificationChain msgs = null;
      if (rate != null)
        msgs = ((InternalEObject)rate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArduinoDSLPackage.COMPONENT_BODY__RATE, null, msgs);
      if (newRate != null)
        msgs = ((InternalEObject)newRate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArduinoDSLPackage.COMPONENT_BODY__RATE, null, msgs);
      msgs = basicSetRate(newRate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__RATE, newRate, newRate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Smoothing getSmoothing()
  {
    return smoothing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSmoothing(Smoothing newSmoothing, NotificationChain msgs)
  {
    Smoothing oldSmoothing = smoothing;
    smoothing = newSmoothing;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING, oldSmoothing, newSmoothing);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSmoothing(Smoothing newSmoothing)
  {
    if (newSmoothing != smoothing)
    {
      NotificationChain msgs = null;
      if (smoothing != null)
        msgs = ((InternalEObject)smoothing).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING, null, msgs);
      if (newSmoothing != null)
        msgs = ((InternalEObject)newSmoothing).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING, null, msgs);
      msgs = basicSetSmoothing(newSmoothing, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING, newSmoothing, newSmoothing));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArduinoDSLPackage.COMPONENT_BODY__MAP:
        return basicSetMap(null, msgs);
      case ArduinoDSLPackage.COMPONENT_BODY__RATE:
        return basicSetRate(null, msgs);
      case ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING:
        return basicSetSmoothing(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArduinoDSLPackage.COMPONENT_BODY__IO:
        return getIo();
      case ArduinoDSLPackage.COMPONENT_BODY__TYPE:
        return getType();
      case ArduinoDSLPackage.COMPONENT_BODY__PIN:
        return getPin();
      case ArduinoDSLPackage.COMPONENT_BODY__MAP:
        return getMap();
      case ArduinoDSLPackage.COMPONENT_BODY__RATE:
        return getRate();
      case ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING:
        return getSmoothing();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArduinoDSLPackage.COMPONENT_BODY__IO:
        setIo((String)newValue);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__TYPE:
        setType((String)newValue);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__PIN:
        setPin((Integer)newValue);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__MAP:
        setMap((Map)newValue);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__RATE:
        setRate((Rate)newValue);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING:
        setSmoothing((Smoothing)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArduinoDSLPackage.COMPONENT_BODY__IO:
        setIo(IO_EDEFAULT);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__PIN:
        setPin(PIN_EDEFAULT);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__MAP:
        setMap((Map)null);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__RATE:
        setRate((Rate)null);
        return;
      case ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING:
        setSmoothing((Smoothing)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArduinoDSLPackage.COMPONENT_BODY__IO:
        return IO_EDEFAULT == null ? io != null : !IO_EDEFAULT.equals(io);
      case ArduinoDSLPackage.COMPONENT_BODY__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case ArduinoDSLPackage.COMPONENT_BODY__PIN:
        return pin != PIN_EDEFAULT;
      case ArduinoDSLPackage.COMPONENT_BODY__MAP:
        return map != null;
      case ArduinoDSLPackage.COMPONENT_BODY__RATE:
        return rate != null;
      case ArduinoDSLPackage.COMPONENT_BODY__SMOOTHING:
        return smoothing != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (io: ");
    result.append(io);
    result.append(", type: ");
    result.append(type);
    result.append(", pin: ");
    result.append(pin);
    result.append(')');
    return result.toString();
  }

} //ComponentBodyImpl
