/**
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.arduinoDSL.impl;

import dk.sdu.mdsd.arduinoDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoDSLFactoryImpl extends EFactoryImpl implements ArduinoDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ArduinoDSLFactory init()
  {
    try
    {
      ArduinoDSLFactory theArduinoDSLFactory = (ArduinoDSLFactory)EPackage.Registry.INSTANCE.getEFactory(ArduinoDSLPackage.eNS_URI);
      if (theArduinoDSLFactory != null)
      {
        return theArduinoDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ArduinoDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArduinoDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ArduinoDSLPackage.PROGRAM: return createProgram();
      case ArduinoDSLPackage.RULE: return createRule();
      case ArduinoDSLPackage.CONDITION: return createCondition();
      case ArduinoDSLPackage.EXPRESSION: return createExpression();
      case ArduinoDSLPackage.EXP_WEAK_OP: return createExpWeakOp();
      case ArduinoDSLPackage.EXP_STRONG_OP: return createExpStrongOp();
      case ArduinoDSLPackage.VALUE: return createValue();
      case ArduinoDSLPackage.ATTRIBUTE: return createAttribute();
      case ArduinoDSLPackage.DELTA: return createDelta();
      case ArduinoDSLPackage.RULE_BODY: return createRuleBody();
      case ArduinoDSLPackage.ASSIGNMENT: return createAssignment();
      case ArduinoDSLPackage.NODE: return createNode();
      case ArduinoDSLPackage.COMPONENT: return createComponent();
      case ArduinoDSLPackage.COMPONENT_BODY: return createComponentBody();
      case ArduinoDSLPackage.MAP: return createMap();
      case ArduinoDSLPackage.RANGE: return createRange();
      case ArduinoDSLPackage.RATE: return createRate();
      case ArduinoDSLPackage.SMOOTHING: return createSmoothing();
      case ArduinoDSLPackage.EXP: return createExp();
      case ArduinoDSLPackage.FACTOR: return createFactor();
      case ArduinoDSLPackage.PLUS: return createPlus();
      case ArduinoDSLPackage.MINUS: return createMinus();
      case ArduinoDSLPackage.MULT: return createMult();
      case ArduinoDSLPackage.DIV: return createDiv();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpWeakOp createExpWeakOp()
  {
    ExpWeakOpImpl expWeakOp = new ExpWeakOpImpl();
    return expWeakOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpStrongOp createExpStrongOp()
  {
    ExpStrongOpImpl expStrongOp = new ExpStrongOpImpl();
    return expStrongOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Delta createDelta()
  {
    DeltaImpl delta = new DeltaImpl();
    return delta;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RuleBody createRuleBody()
  {
    RuleBodyImpl ruleBody = new RuleBodyImpl();
    return ruleBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentBody createComponentBody()
  {
    ComponentBodyImpl componentBody = new ComponentBodyImpl();
    return componentBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Map createMap()
  {
    MapImpl map = new MapImpl();
    return map;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rate createRate()
  {
    RateImpl rate = new RateImpl();
    return rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Smoothing createSmoothing()
  {
    SmoothingImpl smoothing = new SmoothingImpl();
    return smoothing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp createExp()
  {
    ExpImpl exp = new ExpImpl();
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Factor createFactor()
  {
    FactorImpl factor = new FactorImpl();
    return factor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mult createMult()
  {
    MultImpl mult = new MultImpl();
    return mult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Div createDiv()
  {
    DivImpl div = new DivImpl();
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArduinoDSLPackage getArduinoDSLPackage()
  {
    return (ArduinoDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ArduinoDSLPackage getPackage()
  {
    return ArduinoDSLPackage.eINSTANCE;
  }

} //ArduinoDSLFactoryImpl
