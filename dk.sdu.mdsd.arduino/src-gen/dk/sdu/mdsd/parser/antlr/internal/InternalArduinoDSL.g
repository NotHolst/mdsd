/*
 * generated by Xtext 2.17.0
 */
grammar InternalArduinoDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dk.sdu.mdsd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.sdu.mdsd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.sdu.mdsd.services.ArduinoDSLGrammarAccess;

}

@parser::members {

 	private ArduinoDSLGrammarAccess grammarAccess;

    public InternalArduinoDSLParser(TokenStream input, ArduinoDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ArduinoDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getProgramRuleParserRuleCall_0_0());
				}
				lv_program_0_1=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"program",
						lv_program_0_1,
						"dk.sdu.mdsd.ArduinoDSL.Rule");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getProgramAccess().getProgramNodeParserRuleCall_0_1());
				}
				lv_program_0_2=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"program",
						lv_program_0_2,
						"dk.sdu.mdsd.ArduinoDSL.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_type_0_1='when'
					{
						newLeafNode(lv_type_0_1, grammarAccess.getRuleAccess().getTypeWhenKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
						setWithLastConsumed($current, "type", lv_type_0_1, null);
					}
					    |
					lv_type_0_2='once'
					{
						newLeafNode(lv_type_0_2, grammarAccess.getRuleAccess().getTypeOnceKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
						setWithLastConsumed($current, "type", lv_type_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"dk.sdu.mdsd.ArduinoDSL.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getBodyRuleBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleRuleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"dk.sdu.mdsd.ArduinoDSL.RuleBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getLeftExpParserRuleCall_0_0());
				}
				lv_left_0_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"dk.sdu.mdsd.ArduinoDSL.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_operator_1_0=RULE_BOOLEAN_OPERATOR
				{
					newLeafNode(lv_operator_1_0, grammarAccess.getConditionAccess().getOperatorBOOLEAN_OPERATORTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionRule());
					}
					setWithLastConsumed(
						$current,
						"operator",
						lv_operator_1_0,
						"dk.sdu.mdsd.ArduinoDSL.BOOLEAN_OPERATOR");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getRightExpParserRuleCall_2_0());
				}
				lv_right_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"right",
						lv_right_2_0,
						"dk.sdu.mdsd.ArduinoDSL.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current; }
	EOF;

// Rule Exp
ruleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpAccess().getFactorParserRuleCall_0());
		}
		this_Factor_0=ruleFactor
		{
			$current = $this_Factor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpAccess().getExpLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpAccess().getOperatorExpWeakOpParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleExpWeakOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"dk.sdu.mdsd.ArduinoDSL.ExpWeakOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpAccess().getRightFactorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleFactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.mdsd.ArduinoDSL.Factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_ruleFactor=ruleFactor
	{ $current=$iv_ruleFactor.current; }
	EOF;

// Rule Factor
ruleFactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFactorAccess().getValueParserRuleCall_0());
		}
		this_Value_0=ruleValue
		{
			$current = $this_Value_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFactorAccess().getFactorLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getOperatorExpStrongOpParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleExpStrongOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"dk.sdu.mdsd.ArduinoDSL.ExpStrongOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getRightValueParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.mdsd.ArduinoDSL.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpWeakOp
entryRuleExpWeakOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpWeakOpRule()); }
	iv_ruleExpWeakOp=ruleExpWeakOp
	{ $current=$iv_ruleExpWeakOp.current; }
	EOF;

// Rule ExpWeakOp
ruleExpWeakOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpWeakOpAccess().getPlusAction_0_0(),
						$current);
				}
			)
			otherlv_1='+'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpWeakOpAccess().getPlusSignKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpWeakOpAccess().getMinusAction_1_0(),
						$current);
				}
			)
			otherlv_3='-'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpWeakOpAccess().getHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleExpStrongOp
entryRuleExpStrongOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpStrongOpRule()); }
	iv_ruleExpStrongOp=ruleExpStrongOp
	{ $current=$iv_ruleExpStrongOp.current; }
	EOF;

// Rule ExpStrongOp
ruleExpStrongOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpStrongOpAccess().getMultAction_0_0(),
						$current);
				}
			)
			otherlv_1='*'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpStrongOpAccess().getAsteriskKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpStrongOpAccess().getDivAction_1_0(),
						$current);
				}
			)
			otherlv_3='/'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpStrongOpAccess().getSolidusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getValueAccess().getValueAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getValueAccess().getNUMBERParserRuleCall_0_1());
			}
			ruleNUMBER
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getAttributeParserRuleCall_1());
		}
		this_Attribute_2=ruleAttribute
		{
			$current = $this_Attribute_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getDeltaParserRuleCall_2());
		}
		this_Delta_3=ruleDelta
		{
			$current = $this_Delta_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getValueAccess().getValueAction_3_0(),
						$current);
				}
			)
			this_STATE_5=RULE_STATE
			{
				newLeafNode(this_STATE_5, grammarAccess.getValueAccess().getSTATETerminalRuleCall_3_1());
			}
		)
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getNameNodeCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getComponentComponentCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleDelta
entryRuleDelta returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeltaRule()); }
	iv_ruleDelta=ruleDelta
	{ $current=$iv_ruleDelta.current; }
	EOF;

// Rule Delta
ruleDelta returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeltaAccess().getAttributeParserRuleCall_0());
		}
		this_Attribute_0=ruleAttribute
		{
			$current = $this_Attribute_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='delta'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeltaAccess().getDeltaKeyword_1());
		}
	)
;

// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); }
	iv_ruleNUMBER=ruleNUMBER
	{ $current=$iv_ruleNUMBER.current.getText(); }
	EOF;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRuleRuleBody
entryRuleRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleBodyRule()); }
	iv_ruleRuleBody=ruleRuleBody
	{ $current=$iv_ruleRuleBody.current; }
	EOF;

// Rule RuleBody
ruleRuleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRuleBodyAccess().getAssignmentAssignmentParserRuleCall_0());
			}
			lv_assignment_0_0=ruleAssignment
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRuleBodyRule());
				}
				add(
					$current,
					"assignment",
					lv_assignment_0_0,
					"dk.sdu.mdsd.ArduinoDSL.Assignment");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getAttributeAttributeParserRuleCall_0_0());
				}
				lv_attribute_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_0_0,
						"dk.sdu.mdsd.ArduinoDSL.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueExpParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"dk.sdu.mdsd.ArduinoDSL.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeAccess().getComponentsComponentParserRuleCall_2_0());
				}
				lv_components_2_0=ruleComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeRule());
					}
					add(
						$current,
						"components",
						lv_components_2_0,
						"dk.sdu.mdsd.ArduinoDSL.Component");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getNodeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	iv_ruleComponent=ruleComponent
	{ $current=$iv_ruleComponent.current; }
	EOF;

// Rule Component
ruleComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getPropertiesComponentBodyParserRuleCall_1_0());
				}
				lv_properties_1_0=ruleComponentBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					set(
						$current,
						"properties",
						lv_properties_1_0,
						"dk.sdu.mdsd.ArduinoDSL.ComponentBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComponentBody
entryRuleComponentBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentBodyRule()); }
	iv_ruleComponentBody=ruleComponentBody
	{ $current=$iv_ruleComponentBody.current; }
	EOF;

// Rule ComponentBody
ruleComponentBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_io_0_0=RULE_IO
				{
					newLeafNode(lv_io_0_0, grammarAccess.getComponentBodyAccess().getIoIOTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentBodyRule());
					}
					setWithLastConsumed(
						$current,
						"io",
						lv_io_0_0,
						"dk.sdu.mdsd.ArduinoDSL.IO");
				}
			)
		)
		(
			(
				lv_type_1_0=RULE_TYPE
				{
					newLeafNode(lv_type_1_0, grammarAccess.getComponentBodyAccess().getTypeTYPETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentBodyRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"dk.sdu.mdsd.ArduinoDSL.TYPE");
				}
			)
		)
		otherlv_2='pin'
		{
			newLeafNode(otherlv_2, grammarAccess.getComponentBodyAccess().getPinKeyword_2());
		}
		(
			(
				lv_pin_3_0=RULE_INT
				{
					newLeafNode(lv_pin_3_0, grammarAccess.getComponentBodyAccess().getPinINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentBodyRule());
					}
					setWithLastConsumed(
						$current,
						"pin",
						lv_pin_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentBodyAccess().getMapMapParserRuleCall_4_0());
				}
				lv_map_4_0=ruleMap
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentBodyRule());
					}
					set(
						$current,
						"map",
						lv_map_4_0,
						"dk.sdu.mdsd.ArduinoDSL.Map");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentBodyAccess().getRateRateParserRuleCall_5_0());
				}
				lv_rate_5_0=ruleRate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentBodyRule());
					}
					set(
						$current,
						"rate",
						lv_rate_5_0,
						"dk.sdu.mdsd.ArduinoDSL.Rate");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentBodyAccess().getSmoothingSmoothingParserRuleCall_6_0());
				}
				lv_smoothing_6_0=ruleSmoothing
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentBodyRule());
					}
					set(
						$current,
						"smoothing",
						lv_smoothing_6_0,
						"dk.sdu.mdsd.ArduinoDSL.Smoothing");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMap
entryRuleMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapRule()); }
	iv_ruleMap=ruleMap
	{ $current=$iv_ruleMap.current; }
	EOF;

// Rule Map
ruleMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map'
		{
			newLeafNode(otherlv_0, grammarAccess.getMapAccess().getMapKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapAccess().getInRangeParserRuleCall_1_0());
				}
				lv_in_1_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapRule());
					}
					set(
						$current,
						"in",
						lv_in_1_0,
						"dk.sdu.mdsd.ArduinoDSL.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=>'
		{
			newLeafNode(otherlv_2, grammarAccess.getMapAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapAccess().getOutRangeParserRuleCall_3_0());
				}
				lv_out_3_0=ruleRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapRule());
					}
					set(
						$current,
						"out",
						lv_out_3_0,
						"dk.sdu.mdsd.ArduinoDSL.Range");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	iv_ruleRange=ruleRange
	{ $current=$iv_ruleRange.current; }
	EOF;

// Rule Range
ruleRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getLowNUMBERParserRuleCall_0_0());
				}
				lv_low_0_0=ruleNUMBER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"low",
						lv_low_0_0,
						"dk.sdu.mdsd.ArduinoDSL.NUMBER");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeAccess().getHighNUMBERParserRuleCall_2_0());
				}
				lv_high_2_0=ruleNUMBER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeRule());
					}
					set(
						$current,
						"high",
						lv_high_2_0,
						"dk.sdu.mdsd.ArduinoDSL.NUMBER");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRate
entryRuleRate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRateRule()); }
	iv_ruleRate=ruleRate
	{ $current=$iv_ruleRate.current; }
	EOF;

// Rule Rate
ruleRate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rate'
		{
			newLeafNode(otherlv_0, grammarAccess.getRateAccess().getRateKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getRateAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRateRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleSmoothing
entryRuleSmoothing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmoothingRule()); }
	iv_ruleSmoothing=ruleSmoothing
	{ $current=$iv_ruleSmoothing.current; }
	EOF;

// Rule Smoothing
ruleSmoothing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='smoothing'
		{
			newLeafNode(otherlv_0, grammarAccess.getSmoothingAccess().getSmoothingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmoothingAccess().getValueNUMBERParserRuleCall_1_0());
				}
				lv_value_1_0=ruleNUMBER
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmoothingRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"dk.sdu.mdsd.ArduinoDSL.NUMBER");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_BOOLEAN_OPERATOR : ('<'|'>'|'>='|'<='|'=='|'!=');

RULE_STATE : ('on'|'off');

RULE_IO : ('input'|'output');

RULE_TYPE : ('analog'|'digital');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
