/**
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import dk.sdu.mdsd.arduinoDSL.Assignment;
import dk.sdu.mdsd.arduinoDSL.Component;
import dk.sdu.mdsd.arduinoDSL.ComponentBody;
import dk.sdu.mdsd.arduinoDSL.Condition;
import dk.sdu.mdsd.arduinoDSL.Expression;
import dk.sdu.mdsd.arduinoDSL.Node;
import dk.sdu.mdsd.arduinoDSL.Rate;
import dk.sdu.mdsd.arduinoDSL.Rule;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ArduinoDSLGeneratorOld extends AbstractGenerator {
  private long defaultRate = 0;
  
  private String include = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("#include <SPI.h>");
      _builder.newLine();
      _builder.append("#include <nRF24L01.h>");
      _builder.newLine();
      _builder.append("#include <RF24.h>");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String common = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("typedef union {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("unsigned char byteval[4];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("float floatval;");
      _builder.newLine();
      _builder.append("} FloatByte;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("typedef union {");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("unsigned char byteval[2];");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("int intval;");
      _builder.newLine();
      _builder.append("} IntByte;");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String utilitySensor = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("void writeBuffer(FloatByte value, char buf[6]){");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("buf[2] = value.byteval[0];");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("buf[3] = value.byteval[1];");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("buf[4] = value.byteval[2];");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("buf[5] = value.byteval[3];");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("void writeBuffer(IntByte value, char buf[6]){");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("buf[0] = value.byteval[0];");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("buf[1] = value.byteval[1];");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String radio = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("RF24 radio(7, 8); // CE, CSN");
      _builder.newLine();
      _builder.append("const byte address[6] = \"00001\";");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String setupTransmitter = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("radio.begin();");
      _builder.newLine();
      _builder.append("radio.openWritingPipe(address);");
      _builder.newLine();
      _builder.append("radio.setPALevel(RF24_PA_MIN);");
      _builder.newLine();
      _builder.append("radio.stopListening();");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String setupReceiver = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("radio.begin();");
      _builder.newLine();
      _builder.append("radio.openReadingPipe(0, address);");
      _builder.newLine();
      _builder.append("radio.setPALevel(RF24_PA_MIN);");
      _builder.newLine();
      _builder.append("radio.startListening();");
      _builder.newLine();
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String commonOutputLoop = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("char text[32] = \"\";");
      _builder.newLine();
      _builder.append("radio.read(&text, sizeof(text));");
      _builder.newLine();
      _builder.append("IntByte id;");
      _builder.newLine();
      _builder.append("id.byteval[0] = text[0];");
      _builder.newLine();
      _builder.append("id.byteval[1] = text[1];");
      _builder.newLine();
      _builder.newLine();
      _builder.append("FloatByte value;");
      _builder.newLine();
      _builder.append("value.byteval[0] = text[2];");
      _builder.newLine();
      _builder.append("value.byteval[1] = text[3];");
      _builder.newLine();
      _builder.append("value.byteval[2] = text[4];");
      _builder.newLine();
      _builder.append("value.byteval[3] = text[5];");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private final HashMap<Component, Integer> id = new HashMap<Component, Integer>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final AtomicInteger index = new AtomicInteger(0);
    final Procedure1<Node> _function = (Node it) -> {
      final Consumer<Component> _function_1 = (Component it_1) -> {
        this.id.put(it_1, Integer.valueOf(index.getAndIncrement()));
      };
      it.getComponents().forEach(_function_1);
    };
    IteratorExtensions.<Node>forEach(Iterators.<Node>filter(resource.getAllContents(), Node.class), _function);
    final Procedure1<Node> _function_1 = (Node it) -> {
      this.generateNode(it, resource, fsa);
    };
    IteratorExtensions.<Node>forEach(Iterators.<Node>filter(resource.getAllContents(), Node.class), _function_1);
  }
  
  public void generateNode(final Node node, final Resource resource, final IFileSystemAccess2 fsa) {
    StringBuilder fileContent = new StringBuilder();
    StringBuilder variables = new StringBuilder();
    StringBuilder loopBody = new StringBuilder();
    StringBuilder setupBody = new StringBuilder();
    StringBuilder methods = new StringBuilder();
    StringBuilder rules = new StringBuilder();
    fileContent.append(this.include);
    fileContent.append(this.common);
    variables.append(this.radio);
    final Function1<Component, Boolean> _function = (Component it) -> {
      String _io = it.getProperties().getIo();
      return Boolean.valueOf(Objects.equal(_io, "input"));
    };
    boolean hasInput = IterableExtensions.<Component>exists(node.getComponents(), _function);
    final Function1<Component, Boolean> _function_1 = (Component it) -> {
      String _io = it.getProperties().getIo();
      return Boolean.valueOf(Objects.equal(_io, "output"));
    };
    boolean hasOutput = IterableExtensions.<Component>exists(node.getComponents(), _function_1);
    if (hasInput) {
      fileContent.append(this.utilitySensor);
      setupBody.append(this.setupTransmitter);
    }
    if (hasOutput) {
      fileContent.append(this.setupReceiver);
      loopBody.append(this.commonOutputLoop);
    }
    EList<Component> _components = node.getComponents();
    for (final Component component : _components) {
      this.createComponent(component, methods, loopBody, variables, setupBody, resource);
    }
    fileContent.append(variables);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("void setup() {");
    _builder.newLine();
    fileContent.append(_builder);
    fileContent.append(setupBody);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.newLine();
    fileContent.append(_builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("void loop() {");
    _builder_2.newLine();
    fileContent.append(_builder_2);
    fileContent.append(loopBody);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.newLine();
    fileContent.append(_builder_3);
    fileContent.append(methods);
    String _name = node.getName();
    String _plus = (_name + ".ino");
    fsa.generateFile(_plus, fileContent.toString());
  }
  
  public StringBuilder createComponent(final Component component, final StringBuilder methods, final StringBuilder loopBody, final StringBuilder variables, final StringBuilder setupBody, final Resource resource) {
    StringBuilder _xifexpression = null;
    String _io = component.getProperties().getIo();
    boolean _equals = Objects.equal(_io, "input");
    if (_equals) {
      _xifexpression = this.createInputComponent(component, methods, loopBody, variables, setupBody);
    } else {
      this.createOutputComponent(component, methods, loopBody, variables, setupBody, resource);
    }
    return _xifexpression;
  }
  
  public StringBuilder createInputComponent(final Component component, final StringBuilder methods, final StringBuilder loopBody, final StringBuilder variables, final StringBuilder setupBody) {
    StringBuilder _xblockexpression = null;
    {
      ComponentBody body = component.getProperties();
      int pin = body.getPin();
      String type = body.getType();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("int ");
      String _name = component.getName();
      _builder.append(_name);
      _builder.append("Pin = ");
      {
        boolean _equals = type.equals("analog");
        if (_equals) {
          _builder.append("A");
        }
      }
      _builder.append(pin);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("FloatByte ");
      String _name_1 = component.getName();
      _builder.append(_name_1);
      _builder.append("Value;");
      _builder.newLineIfNotEmpty();
      _builder.append("unsigned long ");
      String _name_2 = component.getName();
      _builder.append(_name_2);
      _builder.append("Rate = ");
      long _xifexpression = (long) 0;
      Rate _rate = body.getRate();
      boolean _tripleNotEquals = (_rate != null);
      if (_tripleNotEquals) {
        _xifexpression = body.getRate().getValue();
      } else {
        _xifexpression = this.defaultRate;
      }
      _builder.append(_xifexpression);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.append("unsigned long ");
      String _name_3 = component.getName();
      _builder.append(_name_3);
      _builder.append("LastUpdate = 0;");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      String vars = _builder.toString();
      variables.append(vars);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("\t");
      _builder_1.append("read");
      String _name_4 = component.getName();
      _builder_1.append(_name_4, "\t");
      _builder_1.append("();");
      _builder_1.newLineIfNotEmpty();
      loopBody.append(_builder_1);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("void read");
      String _name_5 = component.getName();
      _builder_2.append(_name_5);
      _builder_2.append("(){");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("  ");
      _builder_2.append("if(millis() > ");
      String _name_6 = component.getName();
      _builder_2.append(_name_6, "  ");
      _builder_2.append("LastUpdate + ");
      String _name_7 = component.getName();
      _builder_2.append(_name_7, "  ");
      _builder_2.append("Rate){");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("    ");
      String _name_8 = component.getName();
      _builder_2.append(_name_8, "    ");
      _builder_2.append("LastUpdate = millis();");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("    ");
      _builder_2.newLine();
      _builder_2.append("    ");
      _builder_2.append("char buf[6];");
      _builder_2.newLine();
      _builder_2.append("    ");
      _builder_2.append("IntByte  ");
      String _name_9 = component.getName();
      _builder_2.append(_name_9, "    ");
      _builder_2.append("ID;");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("    ");
      String _name_10 = component.getName();
      _builder_2.append(_name_10, "    ");
      _builder_2.append("ID.intval = ");
      Integer _get = this.id.get(component);
      _builder_2.append(_get, "    ");
      _builder_2.append("; //Inserted ID");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("    ");
      _builder_2.append("writeBuffer(PotentiometerID,  buf);");
      _builder_2.newLine();
      _builder_2.append("    ");
      _builder_2.newLine();
      _builder_2.append("    ");
      String _name_11 = component.getName();
      _builder_2.append(_name_11, "    ");
      _builder_2.append("Value.floatval = mapfloat(analogRead(");
      String _name_12 = component.getName();
      _builder_2.append(_name_12, "    ");
      _builder_2.append("Pin), ");
      float _low = body.getMap().getIn().getLow();
      _builder_2.append(_low, "    ");
      _builder_2.append(", ");
      float _high = body.getMap().getIn().getHigh();
      _builder_2.append(_high, "    ");
      _builder_2.append(", ");
      float _low_1 = body.getMap().getOut().getLow();
      _builder_2.append(_low_1, "    ");
      _builder_2.append(", ");
      float _high_1 = body.getMap().getOut().getHigh();
      _builder_2.append(_high_1, "    ");
      _builder_2.append(");");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("    ");
      _builder_2.append("writeBuffer(");
      String _name_13 = component.getName();
      _builder_2.append(_name_13, "    ");
      _builder_2.append("Value, buf);");
      _builder_2.newLineIfNotEmpty();
      _builder_2.append("    ");
      _builder_2.append("radio.write(&buf, sizeof(buf));");
      _builder_2.newLine();
      _builder_2.append("  ");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.newLine();
      String function = _builder_2.toString();
      _xblockexpression = methods.append(function);
    }
    return _xblockexpression;
  }
  
  public void createOutputComponent(final Component component, final StringBuilder fileContent, final StringBuilder loopBody, final StringBuilder variables, final StringBuilder setupBody, final Resource resource) {
    ComponentBody body = component.getProperties();
    String _type = body.getType();
    boolean _equals = Objects.equal(_type, "digital");
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("int ");
      String _name = component.getName();
      _builder.append(_name);
      _builder.append("Pin = ");
      int _pin = component.getProperties().getPin();
      _builder.append(_pin);
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      variables.append(_builder);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("pinMode(");
      String _name_1 = component.getName();
      _builder_1.append(_name_1);
      _builder_1.append("Pin,OUTPUT);");
      _builder_1.newLineIfNotEmpty();
      setupBody.append(_builder_1);
    }
    final Procedure1<Rule> _function = (Rule it) -> {
      final Function1<Assignment, Boolean> _function_1 = (Assignment it_1) -> {
        Component _component = it_1.getAttribute().getComponent();
        return Boolean.valueOf(Objects.equal(component, _component));
      };
      boolean _exists = IterableExtensions.<Assignment>exists(it.getBody().getAssignment(), _function_1);
      if (_exists) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("if(id.intval == Component");
        Integer _get = this.id.get(it.getCondition().getLeft());
        _builder_2.append(_get);
        _builder_2.append("){");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("if(");
        Expression _left = it.getCondition().getLeft();
        _builder_2.append(_left, "\t");
        _builder_2.append(" ");
        String _operator = it.getCondition().getOperator();
        _builder_2.append(_operator, "\t");
        _builder_2.append(" ");
        Condition _condition = it.getCondition();
        _builder_2.append(_condition, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        _builder_2.newLine();
        loopBody.append(_builder_2);
      }
    };
    IteratorExtensions.<Rule>forEach(Iterators.<Rule>filter(resource.getAllContents(), Rule.class), _function);
  }
}
