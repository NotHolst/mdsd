/**
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.scoping;

import com.google.common.base.Objects;
import dk.sdu.mdsd.arduinoDSL.ArduinoDSLPackage;
import dk.sdu.mdsd.arduinoDSL.Attribute;
import dk.sdu.mdsd.arduinoDSL.Node;
import dk.sdu.mdsd.scoping.AbstractArduinoDSLScopeProvider;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ArduinoDSLScopeProvider extends AbstractArduinoDSLScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof Attribute) && Objects.equal(reference, ArduinoDSLPackage.Literals.ATTRIBUTE__COMPONENT))) {
      final EObject rootElement = EcoreUtil2.getRootContainer(context);
      final String nodeName = ((Attribute) context).getName().getName();
      final List<Node> allNodes = EcoreUtil2.<Node>getAllContentsOfType(rootElement, Node.class);
      for (final Node node : allNodes) {
        String _name = node.getName();
        boolean _equals = Objects.equal(_name, nodeName);
        if (_equals) {
          return Scopes.scopeFor(node.getComponents());
        }
      }
    }
    return super.getScope(context, reference);
  }
}
